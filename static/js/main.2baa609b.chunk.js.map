{"version":3,"sources":["images/FB.jpg","components/TextInput.js","pages/LoginPage.jsx","config/firebase.js","pages/Admin.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextInput","type","this","props","id","name","placeholder","value","onChange","autocomplete","React","Component","LoginPage","onChangeUser","event","setState","username","target","onChangePass","password","click","state","history","push","window","alert","content","src","Front","height","width","alt","clickable","action","e","onClick","db","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getFirestore","Admin","addBm","a","addDoc","collection","docRef","console","log","error","className","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2baa609b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FB.c8ebd822.jpg\";","import React from 'react';\r\n\r\nclass TextInput extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input type={this.props.type} \r\n                       id=\"input\"\r\n                       name={this.props.name}\r\n                       placeholder={this.props.placeholder} \r\n                       value={this.props.value} \r\n                       onChange={this.props.onChange}\r\n                       autocomplete=\"off\"/><br/><br/>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default TextInput","import React from 'react';\r\nimport '../styles/LoginStyle.css'\r\nimport Front from '../images/FB.jpg'\r\nimport TextInput from '../components/TextInput'\r\nclass LoginPage extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n    }\r\n\r\n    onChangeUser = (event) => {\r\n        this.setState({ username: event.target.value })\r\n    }\r\n\r\n    onChangePass = (event) => {\r\n        this.setState({ password: event.target.value })\r\n    }\r\n\r\n    click = () => {\r\n\r\n        if (this.state.username === 'admin' && this.state.password === 'admin') {\r\n            this.props.history.push(`/admin`);\r\n        }\r\n        else {\r\n            window.alert(\"Invalid Username or Password. Try Again!\")\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n\r\n                <div id=\"container\">\r\n                    <div id=\"id1\">\r\n                        <img src={Front} height=\"668\" width=\"700\" alt=\"Banner\" />\r\n                    </div>\r\n\r\n                    <div id=\"id2\">\r\n                        {/* <center><img src={AppLogo} alt=\"logo\"/></center> */}\r\n\r\n                        <div id=\"id3\">\r\n\r\n                            <center><h2 id=\"login\">LOG IN</h2><br />\r\n                                {this.state.clickable &&\r\n                                    <div>Username: {this.state.username} <br />\r\n                                        Password: {this.state.password}</div>}\r\n                                <form action=\"#\" id=\"form\">\r\n                                    <TextInput type=\"text\" name=\"username\" placeholder=\"Enter Username\" onChange={(e) => { this.setState({ username: e.target.value }) }} />\r\n                                    <TextInput type=\"password\" name=\"password\" placeholder=\"Enter Password\" onChange={(e) => { this.setState({ password: e.target.value }) }} />\r\n\r\n                                </form>\r\n                            </center>\r\n                            <br />\r\n                            {/* <span style={{marginLeft:'123px'}}>New User? <a href=\"#\">Click Here</a></span> */}\r\n\r\n                            <center>\r\n\r\n                                <input type=\"submit\" name=\"signin\" id=\"btn\" value=\"Login\" onClick={this.click} />\r\n\r\n                            </center>\r\n\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default LoginPage;","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDWlV7UVxlfRPMiWfB4_wUkH86hBJ773fc\",\r\n  authDomain: \"favouritecuisines.firebaseapp.com\",\r\n  databaseURL: \"https://favouritecuisines-default-rtdb.firebaseio.com\",\r\n  projectId: \"favouritecuisines\",\r\n  storageBucket: \"favouritecuisines.appspot.com\",\r\n  messagingSenderId: \"982457233795\",\r\n  appId: \"1:982457233795:web:c384e9c7f0d835fbe786b6\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore();\r\nexport default db;\r\n","import React from 'react';\r\nimport '../styles/HotelStyle.css'\r\nimport { addDoc, collection } from 'firebase/firestore';\r\nimport db from '../config/firebase';\r\nimport TextInput from '../components/TextInput';\r\n// import User from '../images/kishan.jpg'\r\n// import data from '../data/data.json'\r\nclass Admin extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n    }\r\n    addBm = async () => {\r\n        try {\r\n            const docRef = await addDoc(collection(db, \"branchmanager\"), {\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            });\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n            alert(\"branch manager has been created\")\r\n        } catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div id='back'>\r\n                <div className=\"nav\">\r\n                    <div id=\"logo\">\r\n                        <h2>KHANA SAB K LIYE</h2>\r\n                    </div>\r\n\r\n                    <div id=\"user\">\r\n                        <div className=\"name\">Hello Admin</div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"content\">\r\n\r\n                    <div id=\"panel\">\r\n                        <div id=\"logo\">\r\n                        </div>\r\n                        <div id=\"right\">\r\n                            <div id=\"right-in\">\r\n                                <h4>Branch manager Control For Admin</h4>\r\n\r\n                                <div id=\"total\">\r\n\r\n\r\n\r\n                                    <br />\r\n                                    <form id=\"form\">\r\n                                        <TextInput className='input' type=\"text\" name=\"username\" placeholder=\"Enter Branch Manager Username\" onChange={(e) => { this.setState({ username: e.target.value }) }} />\r\n                                        <TextInput className='input' type=\"password\" name=\"password\" placeholder=\"Enter Branch Manager Password\" onChange={(e) => { this.setState({ password: e.target.value }) }} />\r\n                                        <button id=\"pay\" onClick={this.addBm} >Add New Branch Manager</button>\r\n                                    </form>\r\n                                    {/* <input id=\"pay1\" type=\"button\" value=\"Pay Now\"/> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n    };\r\n}\r\n\r\nexport default Admin;","import React from \"react\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport Admin from \"./pages/Admin\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n// import CheckRequest from './pages/CheckRequest';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LoginPage}></Route>\r\n          <Route exact path=\"/admin\" component={Admin}></Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// import LoginPage from './pages/LoginPage'\r\n// import Hotels from './pages/Hotels'\r\n// import Orders from './pages/Orders'\r\n\r\n// ReactDOM.render(<LoginPage />, document.getElementById('root'));\r\n// ReactDOM.render(<Hotels />, document.getElementById('root'));\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}